print("#1 Mitä hyötyjä automaattisesta testauksesta on verrattuna manuaaliseen testaukseen?")
print("\t-Automaattisessa testauksessa caset ovat aina samat.")
print("\t-Testit suoritetaan aina samanlailla.")
print("\t-Inhimillisiä virheitä ei tule niin paljoa")
print("#2 Mitä haasteita testauksen automatisointi asettaa verrattuna manuaaliseen testaukseen? Pohdi näitä erityisesti kurssin sisällön kontekstissa.")
print("\t-Testicaset täytyy miettiä hyvin etukäteen.")
print("\t-Aina ei ole selvää, mitä pitäisi testata, joten testicasejen teko on vaikeaa")
print("\t-Testattava laite pitää tuntea, jotta sille osaa tehdä testicaseja")
print("#3 Mihin tarvitaan versionhallintaa? Pohdi asiaa testausprojektin kannalta, jossa on useita rinnakkaisia testaajia tai tiimejä. Minkälaisia haasteita saatat kohdata?")
print("\t-Koodit ovat nopeasti saatavilla.")
print("\t-Muokkaaminen ja julkaisu on nopeaa.")
print("\t-Kaikista muutoksista jää merkintä, ja ne voidaan palauttaa")
print("\t-Haasteina esim konfliktoivat muokkaukset koodiin")
print("#4 Mitä etuja Python tarjoaa kielenä sulautetun järjestelmän testaukseen verrattuna esim. C-kieleen? Mitä haasteita?")
print("\t-Python on dynaaminen kieli, eli devaaminen on nopeampaa.")
print("\t-Pythonin syntaksi on ihmisystävällisempi kuin C.")
print("\t-Pythonille löytyy paljon testauskirjastoja");
print("\t-Haasteena on hitaampi suoritus kuin C:llä, joka haittaa etenkin raskaissa kokonaisuuksissa")
print("#5 Miten testiautomaatiota voisi soveltaa kurssilla tehtyihin suunnitteluesimerkkeihin?")
print("\t-Testiautomaatiota voi soveltaa esimerkkeihin kuten testiautomaatiota yleensä sovelletaan.")
print("\t-Tehdään testicaseja, jotka pyöritetään laitteella, ja katsotaan meneekö testi läpi")
print("\t-Esim mitataan, ovatko tietyt jännitteet oikeita")